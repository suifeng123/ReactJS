{
  "_args": [
    [
      {
        "raw": "react-json-tree@^0.10.8",
        "scope": null,
        "escapedName": "react-json-tree",
        "name": "react-json-tree",
        "rawSpec": "^0.10.8",
        "spec": ">=0.10.8 <0.11.0",
        "type": "range"
      },
      "D:\\web\\reactSource\\shen\\react-book-examples\\05\\node_modules\\redux-devtools-log-monitor"
    ]
  ],
  "_from": "react-json-tree@>=0.10.8 <0.11.0",
  "_id": "react-json-tree@0.10.9",
  "_inCache": true,
  "_location": "/react-json-tree",
  "_nodeVersion": "7.6.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/react-json-tree-0.10.9.tgz_1492857919371_0.48078087577596307"
  },
  "_npmUser": {
    "name": "alexkuz",
    "email": "alexkuz@gmail.com"
  },
  "_npmVersion": "4.0.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-json-tree@^0.10.8",
    "scope": null,
    "escapedName": "react-json-tree",
    "name": "react-json-tree",
    "rawSpec": "^0.10.8",
    "spec": ">=0.10.8 <0.11.0",
    "type": "range"
  },
  "_requiredBy": [
    "/redux-devtools-log-monitor"
  ],
  "_resolved": "http://registry.npmjs.org/react-json-tree/-/react-json-tree-0.10.9.tgz",
  "_shasum": "7263173a2cc8bf05eac63b0419c3ce75b232e284",
  "_shrinkwrap": null,
  "_spec": "react-json-tree@^0.10.8",
  "_where": "D:\\web\\reactSource\\shen\\react-book-examples\\05\\node_modules\\redux-devtools-log-monitor",
  "author": {
    "name": "Shu Uesugi",
    "email": "shu@chibicode.com",
    "url": "http://github.com/chibicode"
  },
  "bugs": {
    "url": "https://github.com/chibicode/react-json-tree/issues"
  },
  "contributors": [
    {
      "name": "Alexander Kuznetsov",
      "email": "alexkuz@gmail.com",
      "url": "http://kuzya.org/"
    },
    {
      "name": "Dave Vedder",
      "email": "veddermatic@gmail.com",
      "url": "http://www.eskimospy.com/"
    },
    {
      "name": "Daniele Zannotti",
      "email": "dzannotti@me.com",
      "url": "http://www.github.com/dzannotti"
    }
  ],
  "dependencies": {
    "babel-runtime": "^6.6.1",
    "prop-types": "^15.5.8",
    "react-base16-styling": "^0.5.1"
  },
  "description": "React JSON Viewer Component, Extracted from redux-devtools",
  "devDependencies": {
    "babel-cli": "^6.7.7",
    "babel-core": "^6.7.7",
    "babel-eslint": "^6.0.3",
    "babel-loader": "^6.2.4",
    "babel-plugin-transform-decorators-legacy": "^1.3.4",
    "babel-plugin-transform-es3-member-expression-literals": "^6.5.0",
    "babel-plugin-transform-es3-property-literals": "^6.5.0",
    "babel-plugin-transform-runtime": "^6.7.5",
    "babel-preset-es2015": "^6.6.0",
    "babel-preset-es2015-loose": "^7.0.0",
    "babel-preset-react": "^6.5.0",
    "babel-preset-stage-0": "^6.5.0",
    "eslint": "^2.8",
    "eslint-config-airbnb": "^8.0.0",
    "eslint-plugin-babel": "^3.2.0",
    "eslint-plugin-import": "^1.5.0",
    "eslint-plugin-jsx-a11y": "^1.0.2",
    "eslint-plugin-react": "^5.0.1",
    "expect": "^1.18.0",
    "isparta": "^4.0.0",
    "mocha": "^2.4.5",
    "pre-commit": "^1.1.3",
    "react": "^15.4.2",
    "react-addons-test-utils": "^15.0.0",
    "react-dom": "^15.4.2",
    "rimraf": "^2.5.2"
  },
  "directories": {},
  "dist": {
    "shasum": "7263173a2cc8bf05eac63b0419c3ce75b232e284",
    "tarball": "https://registry.npmjs.org/react-json-tree/-/react-json-tree-0.10.9.tgz"
  },
  "gitHead": "7433ec3148e9851d7c2157151f34ee072623a6cf",
  "homepage": "https://github.com/chibicode/react-json-tree",
  "keywords": [
    "react",
    "json viewer"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "alexkuz",
      "email": "alexkuz@gmail.com"
    },
    {
      "name": "chibicode",
      "email": "shu@chibicode.com"
    },
    {
      "name": "gaearon",
      "email": "dan.abramov@gmail.com"
    }
  ],
  "name": "react-json-tree",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^15.0.0",
    "react-dom": "^15.0.0"
  },
  "pre-commit": "lint",
  "readme": "# react-json-tree\n\nReact JSON Viewer Component, Extracted from [redux-devtools](https://github.com/gaearon/redux-devtools). Supports [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable) objects, such as [Immutable.js](https://facebook.github.io/immutable-js/).\n\n![](https://img.shields.io/npm/v/react-json-tree.svg)\n\n### Usage\n\n```jsx\nimport JSONTree from 'react-json-tree'\n// If you're using Immutable.js: `npm i --save immutable`\nimport { Map } from 'immutable'\n\n// Inside a React component:\nconst json = {\n  array: [1, 2, 3],\n  bool: true,\n  object: {\n    foo: 'bar'\n  },\n  immutable: Map({ key: 'value' })\n}\n\n<JSONTree data={json} />\n```\n\n#### Result:\n\n![](http://cl.ly/image/3f2C2k2t3D0o/screenshot%202015-08-26%20at%2010.24.12%20AM.png)\n\nCheck out [examples](examples) directory for more details.\n\n### Theming\n\nThis component now uses [react-base16-styling](https://github.com/alexkuz/react-base16-styling) module, which allows to customize component via `theme` property, which can be the following:\n- [base16](http://chriskempson.github.io/base16) theme data. [The example theme data can be found here](https://github.com/gaearon/redux-devtools/tree/75322b15ee7ba03fddf10ac3399881e302848874/src/react/themes).\n- object that contains style objects, strings (that treated as classnames) or functions. A function is used to extend its first argument `{ style, className }` and should return an object with the same structure. Other arguments depend on particular context (and should be described here). See [createStylingFromTheme.js](https://github.com/alexkuz/react-json-tree/blob/feature-refactor-styling/src/createStylingFromTheme.js) for the list of styling object keys. Also, this object can extend `base16` theme via `extend` property.\n\nEvery theme has a light version, which is enabled with `invertTheme` prop.\n\n```jsx\nconst theme = {\n  scheme: 'monokai',\n  author: 'wimer hazenberg (http://www.monokai.nl)',\n  base00: '#272822',\n  base01: '#383830',\n  base02: '#49483e',\n  base03: '#75715e',\n  base04: '#a59f85',\n  base05: '#f8f8f2',\n  base06: '#f5f4f1',\n  base07: '#f9f8f5',\n  base08: '#f92672',\n  base09: '#fd971f',\n  base0A: '#f4bf75',\n  base0B: '#a6e22e',\n  base0C: '#a1efe4',\n  base0D: '#66d9ef',\n  base0E: '#ae81ff',\n  base0F: '#cc6633'\n};\n\n<div>\n  <JSONTree data={data} theme={theme} invertTheme={false} />\n</div>\n\n```\n\n#### Result (Monokai theme, dark background):\n\n![](http://cl.ly/image/330o2L1J3V0h/screenshot%202015-08-26%20at%2010.48.24%20AM.png)\n\n#### Advanced Customization\n\n```jsx\n<div>\n  <JSONTree data={data} theme={{\n    extend: theme,\n    // underline keys for literal values\n    valueLabel: {\n      textDecoration: 'underline'\n    },\n    // switch key for objects to uppercase when object is expanded.\n    // `nestedNodeLabel` receives additional arguments `expanded` and `keyPath`\n    nestedNodeLabel: ({ style }, nodeType, expanded) => ({\n      style: {\n        ...style,\n        textTransform: expanded ? 'uppercase' : style.textTransform\n      }\n    })\n  }} />\n</div>\n```\n\n#### Customize Labels for Arrays, Objects, and Iterables\n\nYou can pass `getItemString` to customize the way arrays, objects, and iterable nodes are displayed (optional).\n\nBy default, it'll be:\n\n```jsx\n<JSONTree getItemString={(type, data, itemType, itemString)\n  => <span>{itemType} {itemString}</span>}\n```\n\nBut if you pass the following:\n\n```jsx\nconst getItemString = (type, data, itemType, itemString)\n  => (<span> // {type}</span>);\n```\n\nThen the preview of child elements now look like this:\n\n![](http://cl.ly/image/1J1a0b0T0K3c/screenshot%202015-10-07%20at%203.44.31%20PM.png)\n\n#### Customize Rendering\n\nYou can pass the following properties to customize rendered labels and values:\n\n```jsx\n<JSONTree\n    labelRenderer={raw => <strong>{raw}</strong>}\n    valueRenderer={raw => <em>{raw}</em>}\n/>\n```\n\nIn this example the label and value will be rendered with `<strong>` and `<em>` wrappers respectively.\n\nFor `labelRenderer`, you can provide a full path - [see this PR](https://github.com/chibicode/react-json-tree/pull/32).\n\n#### More Options\n\n- `shouldExpandNode: function(keyName, data, level)` - determines if node should be expanded (root is expanded by default)\n- `hideRoot: Boolean` - if `true`, the root node is hidden.\n- `sortObjectKeys: Boolean | function(a, b)` - sorts object keys with compare function (optional). Isn't applied to iterable maps like `Immutable.Map`.\n\n### Credits\n\n- All credits to [Dave Vedder](http://www.eskimospy.com/) ([veddermatic@gmail.com](mailto:veddermatic@gmail.com)), who wrote the original code as [JSONViewer](https://bitbucket.org/davevedder/react-json-viewer/).\n- Extracted from [redux-devtools](https://github.com/gaearon/redux-devtools), which contained ES6 + inline style port of [JSONViewer](https://bitbucket.org/davevedder/react-json-viewer/) by [Daniele Zannotti](http://www.github.com/dzannotti) ([dzannotti@me.com](mailto:dzannotti@me.com))\n- [Iterable support](https://github.com/gaearon/redux-devtools/pull/79) thanks to [Daniel K](https://github.com/FredyC).\n- npm package created by [Shu Uesugi](http://github.com/chibicode) ([shu@chibicode.com](mailto:shu@chibicode.com)) per [this issue](https://github.com/gaearon/redux-devtools/issues/85).\n\n### Similar Libraries\n\n- [react-treeview](https://github.com/chenglou/react-treeview)\n- [react-json-inspector](https://github.com/Lapple/react-json-inspector)\n- [react-object-inspector](https://github.com/xyc/react-object-inspector)\n\n### License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/chibicode/react-json-tree.git"
  },
  "scripts": {
    "build": "babel src --out-dir lib",
    "clean": "rimraf lib",
    "lint": "eslint --max-warnings=0 src test examples/src",
    "prepublish": "npm run test && npm run clean && npm run build",
    "start": "cd examples && npm start",
    "test": "npm run lint && NODE_ENV=test mocha --compilers js:babel-core/register --recursive",
    "test:cov": "babel-node ./node_modules/.bin/isparta cover ./node_modules/.bin/_mocha -- --recursive",
    "test:watch": "NODE_ENV=test mocha --compilers js:babel-core/register --recursive --watch"
  },
  "version": "0.10.9"
}
